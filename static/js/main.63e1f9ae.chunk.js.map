{"version":3,"sources":["assets/images/next_ico.svg","assets/images/previous_ico.svg","assets/images/repeat_ico.svg","assets/images/shuffle_ico.svg","assets/images/usertive_logo.svg","assets/images/unreleased_cover.png","assets/images/cover-1.png","assets/images/cover.png","app/data.js","views/Album/musicsSlice.js","components/IconButton/index.js","components/IconButton/IconButton.jsx","helpers/getRandomMusic.js","views/Album/MusicConsole/index.js","views/Album/MusicConsole/MusicConsole.jsx","views/Album/MusicCover/index.js","views/Album/MusicCover/MusicCover.jsx","views/Album/MusicInfo/index.js","views/Album/MusicInfo/MusicInf.jsx","views/Album/MusicSlider/index.js","views/Album/MusicSlider/MusicSlider.jsx","components/ProgressBar/index.js","components/ProgressBar/ProgressBar.jsx","views/Album/Audio/Timer/Timer.jsx","views/Album/Audio/index.js","views/Album/Audio/Audio.jsx","views/Album/index.js","views/Album/Album.jsx","App.js","app/store.js","app/serviceWorker.js","index.js"],"names":["module","exports","id","name","author","duration","img","require","musicsSlice","createSlice","initialState","list","data","selectedMusic","selectedIndex","shuffle","repeat","playing","reducers","previusMusic","state","newIndex","lastIndex","length","nextMusic","selectMusic","action","payload","changeModeRepeat","changeModeShuffle","togglePlayMusic","actions","actuallyList","album","IconButton","onClick","className","active","src","alt","getRandomMusic","current","max","Math","floor","random","MusicConsole","dispatch","useDispatch","useSelector","ShuffleIcon","PreviousIcon","randomMusic","NextIcon","RepeatIcon","MusicCover","selected","Logo","MusicInf","MusicSlider","sliderRef","useRef","useState","setState","useEffect","different","comeBackBegin","goLast","slickNext","slickPrev","slickGoTo","ref","centerMode","infinite","speed","slidesToShow","slidesToScroll","variableWidth","map","music","i","key","style","width","ProgressBar","progress","Timer","percent","musicProgress","moment","minutes","seconds","format","Audio","lastSelectedIndex","setSelectedIndex","setMusicProgress","useMemo","setCurrentMusic","useCallback","timer","setTimeout","clearTimeout","Album","App","configureStore","reducer","albumReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63e1f9ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/next_ico.908e77ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/previous_ico.61530e1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/repeat_ico.f24e6532.svg\";","module.exports = __webpack_public_path__ + \"static/media/shuffle_ico.9cca0f11.svg\";","module.exports = __webpack_public_path__ + \"static/media/usertive_logo.2bd484f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/unreleased_cover.a2195768.png\";","module.exports = __webpack_public_path__ + \"static/media/cover-1.8e344a79.png\";","module.exports = __webpack_public_path__ + \"static/media/cover.aa246fdc.png\";","export default [\r\n  {\r\n    id: \"1\",\r\n    name: \"Self Conscious\",\r\n    author: \"Kanye west\",\r\n    duration: 150,\r\n    img: require(\"../assets/images/unreleased_cover.png\"),\r\n  },\r\n  {\r\n    id: \"2\",\r\n    name: \"cos\",\r\n    author: \"some\",\r\n    duration: 230,\r\n    img: require(\"../assets/images/cover-1.png\"),\r\n  },\r\n  {\r\n    id: \"3\",\r\n    name: \"feel the steel\",\r\n    author: \"Steel Panther\",\r\n    duration: 80,\r\n    img: require(\"../assets/images/cover.png\"),\r\n  },\r\n];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport data from \"../../app/data\";\r\n\r\nexport const musicsSlice = createSlice({\r\n  name: \"musics\",\r\n  initialState: {\r\n    list: data,\r\n    selectedMusic: data[0],\r\n    selectedIndex: 0,\r\n    shuffle: false,\r\n    repeat: false,\r\n    playing: false,\r\n  },\r\n  reducers: {\r\n    previusMusic: (state) => {\r\n      const newIndex = state.selectedIndex - 1;\r\n      if (newIndex >= 0) {\r\n        state.selectedIndex = newIndex;\r\n        state.selectedMusic = state.list[newIndex];\r\n      } else {\r\n        const lastIndex = state.list.length - 1;\r\n        state.selectedIndex = lastIndex;\r\n        state.selectedMusic = state.list[lastIndex];\r\n      }\r\n    },\r\n\r\n    nextMusic: (state) => {\r\n      const newIndex = state.selectedIndex + 1;\r\n      if (newIndex <= state.list.length - 1) {\r\n        state.selectedIndex = newIndex;\r\n        state.selectedMusic = state.list[newIndex];\r\n      } else {\r\n        state.selectedIndex = 0;\r\n        state.selectedMusic = state.list[0];\r\n      }\r\n    },\r\n\r\n    selectMusic: (state, action) => {\r\n      state.selectedIndex = action.payload;\r\n      state.selectedMusic = state.list[action.payload];\r\n    },\r\n\r\n    changeModeRepeat: (state) => {\r\n      state.repeat = !state.repeat;\r\n    },\r\n\r\n    changeModeShuffle: (state) => {\r\n      state.shuffle = !state.shuffle;\r\n    },\r\n    togglePlayMusic: (state) => {\r\n      state.playing = !state.playing;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  selectMusic,\r\n  changeModeRepeat,\r\n  changeModeShuffle,\r\n  previusMusic,\r\n  nextMusic,\r\n  togglePlayMusic,\r\n} = musicsSlice.actions;\r\n\r\nexport const actuallyList = (state) => {\r\n  return state.album;\r\n};\r\n\r\nexport default musicsSlice.reducer;\r\n","import IconButton from \"./IconButton\";\r\n\r\nexport default IconButton;\r\n","import React from \"react\";\r\n\r\nimport \"./IconButton.scss\";\r\n\r\nconst IconButton = ({ img, onClick, className, active }) => (\r\n  <button\r\n    className={`iconButton ${className} ${active ? \"iconButton--active\" : \"\"}`}\r\n    onClick={onClick}\r\n  >\r\n    {img && <img src={img} alt=\"\" />}\r\n  </button>\r\n);\r\n\r\nexport default IconButton;\r\n","const getRandomMusic = (current, max) => {\r\n  const newIndex = Math.floor(Math.random() * Math.floor(max));\r\n  return newIndex !== current ? newIndex : getRandomMusic(current, max);\r\n};\r\n\r\nexport default getRandomMusic;\r\n","import MusicConsole from \"./MusicConsole\";\r\n\r\nexport default MusicConsole;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport NextIcon from \"../../../assets/images/next_ico.svg\";\r\nimport PreviousIcon from \"../../../assets/images/previous_ico.svg\";\r\nimport RepeatIcon from \"../../../assets/images/repeat_ico.svg\";\r\nimport ShuffleIcon from \"../../../assets/images/shuffle_ico.svg\";\r\nimport {\r\n  actuallyList,\r\n  changeModeRepeat,\r\n  changeModeShuffle,\r\n  nextMusic,\r\n  previusMusic,\r\n  togglePlayMusic,\r\n  selectMusic,\r\n} from \"../musicsSlice\";\r\nimport \"./MusicConsole.scss\";\r\nimport IconButton from \"../../../components/IconButton\";\r\nimport getRandomMusic from \"../../../helpers/getRandomMusic\";\r\n\r\nconst MusicConsole = () => {\r\n  const dispatch = useDispatch();\r\n  const { shuffle, repeat, playing, list, selectedIndex } = useSelector(\r\n    actuallyList\r\n  );\r\n\r\n  const playNext = () => {\r\n    const randomMusic = getRandomMusic(selectedIndex, list.length);\r\n    if (shuffle) {\r\n      return dispatch(selectMusic(randomMusic));\r\n    }\r\n    return dispatch(nextMusic());\r\n  };\r\n\r\n  const playPrevius = () => {\r\n    const randomMusic = getRandomMusic(selectedIndex, list.length);\r\n    if (shuffle) {\r\n      return dispatch(selectMusic(randomMusic));\r\n    }\r\n    return dispatch(previusMusic());\r\n  };\r\n\r\n  return (\r\n    <div className=\"musicConsole\">\r\n      <IconButton\r\n        active={shuffle}\r\n        img={ShuffleIcon}\r\n        onClick={() => dispatch(changeModeShuffle())}\r\n      />\r\n      <IconButton img={PreviousIcon} onClick={playPrevius} />\r\n      <IconButton\r\n        className={`musicConsole__togglePlay ${\r\n          playing\r\n            ? \"musicConsole__togglePlay--played\"\r\n            : \"musicConsole__togglePlay--stoped\"\r\n        }`}\r\n        onClick={() => dispatch(togglePlayMusic())}\r\n      />\r\n      <IconButton img={NextIcon} onClick={playNext} />\r\n      <IconButton\r\n        active={repeat}\r\n        img={RepeatIcon}\r\n        onClick={() => dispatch(changeModeRepeat())}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MusicConsole;\r\n","import MusicCover from \"./MusicCover\";\r\n\r\nexport default MusicCover;\r\n","import React from \"react\";\r\nimport Logo from \"../../../assets/images/usertive_logo.svg\";\r\nimport \"./MusicCover.scss\";\r\n\r\nconst MusicCover = ({ img, selected }) => {\r\n  return (\r\n    <>\r\n      <div className={`MusicCover `}>\r\n        <img className=\"MusicCover__cover\" src={img} alt=\"\" />\r\n        <div className=\"MusicCover__logo\">\r\n          <img src={Logo} alt=\"usertive_logo\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MusicCover;\r\n","import MusicInf from \"./MusicInf\";\r\n\r\nexport default MusicInf;\r\n","import React from \"react\";\r\nimport \"./MusicInf.scss\";\r\n\r\nconst MusicInf = ({ name, author }) => (\r\n  <div className=\"musicInf\">\r\n    <h2 className=\"musicInf__name\">{name}</h2>\r\n    <p className=\"musicInf__author\">{author}</p>\r\n  </div>\r\n);\r\n\r\nexport default MusicInf;\r\n","import MusicSlider from \"./MusicSlider\";\r\n\r\nexport default MusicSlider;\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { actuallyList } from \"../musicsSlice\";\r\nimport Music from \"../MusicCover\";\r\nimport MusicInf from \"../MusicInfo\";\r\n\r\nimport \"./MusicSlider.scss\";\r\n\r\nconst MusicSlider = () => {\r\n  let sliderRef = useRef(null);\r\n  const { list, selectedIndex, random, selectedMusic } = useSelector(\r\n    actuallyList\r\n  );\r\n  const [state, setState] = useState({\r\n    selectedIndex,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (state.selectedIndex !== selectedIndex) {\r\n      const different = selectedIndex - state.selectedIndex;\r\n      const comeBackBegin = different === -(list.length - 1);\r\n      const goLast = different === list.length - 1;\r\n      if (different === 1 || comeBackBegin) {\r\n        sliderRef.current.slickNext();\r\n      } else if (different === -1 || goLast) {\r\n        sliderRef.current.slickPrev();\r\n      } else if (random) {\r\n        sliderRef.current.slickGoTo(selectedIndex);\r\n      }\r\n      setState({ ...state, selectedIndex });\r\n    }\r\n  }, [selectedIndex]);\r\n\r\n  return (\r\n    <>\r\n      <Slider\r\n        ref={sliderRef}\r\n        className=\"center musicSlider variable-width\"\r\n        centerMode\r\n        infinite\r\n        speed={500}\r\n        slidesToShow={1}\r\n        slidesToScroll={1}\r\n        variableWidth\r\n      >\r\n        {list.map((music, i) => (\r\n          <div key={music.id + \"-cov\"} style={{ width: 290 }}>\r\n            <Music img={music.img} />\r\n          </div>\r\n        ))}\r\n      </Slider>\r\n      <MusicInf {...selectedMusic} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MusicSlider;\r\n","import ProgressBar from \"./ProgressBar\";\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport \"./ProgressBar.scss\";\r\n\r\nconst ProgressBar = ({ progress, className }) => {\r\n  return (\r\n    <div className={`progressBar ${className}`}>\r\n      <div className=\"progressBar__max\" />\r\n      <div\r\n        className=\"progressBar__progress\"\r\n        style={{ width: `${progress}%` }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport ProgressBar from \"../../../../components/ProgressBar\";\r\nimport \"./Timer.scss\";\r\n\r\nconst Timer = ({ percent, musicProgress, duration }) => {\r\n  return (\r\n    <div className=\"timer\">\r\n      <span className=\"timer__time\">\r\n        {moment({\r\n          minutes: Math.floor(musicProgress / 60),\r\n          seconds: musicProgress % 60,\r\n        }).format(\"m:ss\")}\r\n      </span>\r\n\r\n      <ProgressBar progress={percent} className=\"timer__progress\" />\r\n      <span className=\"timer__time\">\r\n        {moment({\r\n          minutes: Math.floor(duration / 60),\r\n          seconds: duration % 60,\r\n        }).format(\"m:ss\")}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import Audio from \"./Audio\";\r\n\r\nexport default Audio;\r\n","import React, { useMemo, useState, useEffect, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actuallyList, selectMusic, nextMusic } from \"../musicsSlice\";\r\nimport getRandomMusic from \"../../../helpers/getRandomMusic\";\r\nimport Timer from \"./Timer/Timer.jsx\";\r\n\r\nconst Audio = () => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    repeat,\r\n    playing,\r\n    list,\r\n    selectedIndex,\r\n    selectedMusic,\r\n    shuffle,\r\n  } = useSelector(actuallyList);\r\n\r\n  const [lastSelectedIndex, setSelectedIndex] = useState(selectedIndex);\r\n  const [musicProgress, setMusicProgress] = useState(0);\r\n\r\n  const percent = useMemo(\r\n    () => (musicProgress / selectedMusic.duration) * 100,\r\n    [musicProgress, selectedMusic.duration]\r\n  );\r\n\r\n  const setCurrentMusic = useCallback(() => {\r\n    if (repeat) {\r\n      return dispatch(selectMusic(selectedIndex));\r\n    } else if (shuffle) {\r\n      return dispatch(selectMusic(getRandomMusic(selectedIndex, list.length)));\r\n    }\r\n    return dispatch(nextMusic());\r\n  }, [selectedIndex, shuffle, repeat, list]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      if (musicProgress < selectedMusic.duration) {\r\n        if (playing) {\r\n          return setMusicProgress(musicProgress + 10);\r\n        }\r\n      } else {\r\n        setCurrentMusic();\r\n        setMusicProgress(0);\r\n      }\r\n    }, 1000);\r\n\r\n    if (lastSelectedIndex !== selectedIndex) {\r\n      clearTimeout(timer);\r\n      setMusicProgress(0);\r\n      setSelectedIndex(selectedIndex);\r\n    }\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [musicProgress, playing, selectedIndex]);\r\n\r\n  return (\r\n    <Timer\r\n      percent={percent}\r\n      musicProgress={musicProgress}\r\n      duration={selectedMusic.duration}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Audio;\r\n","import Album from \"./Album\";\r\n\r\nexport default Album;\r\n","import React from \"react\";\r\nimport MusicConsole from \"./MusicConsole\";\r\nimport MusicSlider from \"./MusicSlider\";\r\nimport Audio from \"./Audio\";\r\n\r\nconst Album = () => (\r\n  <>\r\n    <MusicSlider />\r\n    <MusicConsole />\r\n    <Audio />\r\n  </>\r\n);\r\n\r\nexport default Album;\r\n","import React from \"react\";\r\nimport Album from \"./views/Album\";\r\n\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"album\">\r\n        <header className=\"album__header\" />\r\n        <Album />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport albumReducer from \"../views/Album/musicsSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    album: albumReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/styles/global.scss\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./app/serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}